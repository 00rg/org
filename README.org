* state

The GitOps state of the 00rg universe.

** Cluster Naming

https://www.wordexample.com/list/nouns-with-4-letters
https://gist.github.com/colinvh/14e4b7fb6b66c29f79d3

#+begin_src bash
# Two

work-prod-aws-apse2-dune
#+end_src


| Cluster Type | Environment | Cloud Provider | Region         | Identifier | Cluster Name            | Comment                                                                        |
|--------------+-------------+----------------+----------------+------------+-------------------------+--------------------------------------------------------------------------------|
| Init         | Local       | N/A            | =N/A=            | N/A        | =init=                    | The init cluster.                                                              |
| Root         | Org-Wide    | AWS            | =ap-southeast-2= | bone       | =root-org-aws-apse2-bone= | The root cluster running on AWS in =ap-southeast-2=.                             |
| Root         | Org-Wide    | Local          | =N/A=            | bone       | =root-org-loc-xxxxx-bone= | The root cluster running locally.                                              |
| Management   | Org-Wide    | AWS            | =ap-southeast-2= | yang       | =mgmt-org-aws-apse2-yang= | The management cluster running on AWS in =ap-southeast-2=.                       |
| Management   | Org-Wide    | Local          | =N/A=            | yang       | =mgmt-org-loc-xxxxx-yang= | The management cluster running locally.                                        |
| Workload     | Production  | AWS            | =ap-southeast-2= | muse       | =work-prd-aws-apse2-muse= | Production workload cluster running on AWS in =ap-southeast-2= ("muse" variant). |
| Workload     | Production  | AWS            | =ap-southeast-2= | dune       | =work-prd-aws-apse2-dune= | Production workload cluster running on AWS in =ap-southeast-2= ("dune" variant). |
| Workload     | Development | Google         | =us-west-1=      | yoga       | =work-dev-gcp-uswe1-yoga= | Development workload cluster running on GCP in =us-west-1=.                      |
| Workload     | Staging     | Google         | =us-west-1=      | king       | =work-stg-gcp-uswe1-king= | Staging workload cluster running on AWS in =us-west-1=.                          |
| Workload     | Test        | Azure          | =australiaeast=  | farm       | =work-tst-azr-auest-farm= | Test workload cluster running on Azure in =australiaeast=.                       |
| Workload     | Test        | Local          | =N/A=            | farm       | =work-tst-loc-xxxxx-farm= | Test workload cluster running locally.                                         |
| Data/ML      | Production  | AWS            | =ap-southeast-2= | iris       | =data-prd-aws-apse2-iris= | Production data cluster running on AWS in =ap-southeast-2=.                      |
| Custom       | N/A         | Local          | =N/A=            | boom       | =cust-xxx-loc-xxxxx-boom= | Custom hand-crafted artisinal local cluster.                                   |


** Clusters
This process assumes that a basic AWS account structure has been set up using something like AWS Control Tower. The multi-account structure should look similar to the [[https://aws.amazon.com/blogs/security/update-of-aws-security-reference-architecture-is-now-available/][AWS Security Reference Architecture]].

The full bootstrap process is described below.

*** init
This is the cluster that bootstraps everything else. It is a local [[https://k3d.io][k3d]] cluster that runs Crossplane and is fed CRs so that it creates the first cloud cluster. The Crossplane resources are configured so that they absorb existing cloud resources if they already exist so that the init process is idempotent.

To start the init process, run =make init= and follow the steps. The result will be a standalone dedicated VPC in some high-level AWS account. The VPC will run a single EKS cluster named =root=. This cluster will run its own dedicated Argo CD instance that it will use to bootstrap itself. How does the =init= cluster (running on my laptop) inject Argo CD into the =root= cluster which will have a private control plane in a standalone VPC?

*** root-org-aws-apse2-bone
The root cluster is created in a standalone dedicated VPC in some high-level AWS account. Crossplane is installed on the root cluster and it is provided with CRs that provision the foundation: the network layer and the management cluster(s). All networking resources should be created in the dedicated Network AWS account and then shared using RAM into the other accounts. Potentially each class of cluster (i.e., management, workload, data, etc) should have its own VPC so that we can set up course-grained NACLs that prevent things like the workload clusters making requests of the management clusters.

Either Crossplane or Cluster API should be used to provision the clusters themselves.

*** mgmt-org-aws-apse2-yang
The root cluster creates this cluster on AWS and installs Argo CD on it. An Argo CD ApplicationSet resource is then applied to the cluster so that it boostraps itself using GitOps. The Git directory path that the Application references will be to this repository under something like =config/clusters/management-ap-southest-2= or =config/clusters/management/overlays/ap-southeast-2= (see TODO below).

This cluster should be on the production network (potentially a shared VPC).

** Local Development
There are two primary workflows for local development: /without/ Argo CD /with/ Argo CD. Typically, a developer working on business service won't need or want to use Argo CD locally. It's much simpler to apply resources directly against the local Kubernetes API. Sometimes, however, it is useful to be able to deploy applications locally using the same CI/CD process that you'll encounter when you move beyond your local machine.

*** Local Development Without Argo CD

#+begin_src
  make local-without-argocd
#+end_src

*** Local Development With Argo CD

#+begin_src bash
  make local-with-argocd
  make argocd-port-forward
#+end_src
